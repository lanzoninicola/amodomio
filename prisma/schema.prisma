// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DB_URL")
}

model Product {
  id                     String                   @id @default(uuid())
  name                   String
  um                     String?                  @default("UN")
  categoryId             String?                  @map("category_id")
  subCategoryId          String?                  @map("sub_category_id")
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @updatedAt @map("updated_at")
  Category               Category?                @relation(fields: [categoryId], references: [id])
  SubCategory            SubCategory?             @relation(fields: [subCategoryId], references: [id])
  RecipesIngredientsLink RecipesIngredientsLink[]

  @@map("products")
}

enum RecipeType {
  semiFinished @map("semi-finished")
  pizzaTopping @map("pizza-topping")
}

model Recipe {
  id                     String                   @id @default(uuid())
  name                   String
  type                   RecipeType               @default(semiFinished)
  description            String?
  hasVariations          Boolean                  @default(false) @map("has_variations")
  isVegetarian           Boolean                  @default(false) @map("is_vegetarian")
  isGlutenFree           Boolean                  @default(false) @map("is_gluten_free")
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @updatedAt @map("updated_at")
  ingredients            RecipesIngredient[]
  RecipeVariation        RecipeVariation[]
  RecipesIngredientsLink RecipesIngredientsLink[]

  @@map("recipes")
}

model RecipesIngredient {
  id           String   @id @default(uuid())
  recipeId     String   @map("recipe_id")
  ingredientId String   @map("ingredient_id")
  um           String   @db.VarChar
  quantity     String   @db.VarChar
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  recipe     Recipe                   @relation(fields: [recipeId], references: [id])
  ingredient Ingredient               @relation(fields: [ingredientId], references: [id])
  links      RecipesIngredientsLink[]

  @@map("recipes_ingredients")
}

model Ingredient {
  id        String              @id @default(uuid())
  name      String              @db.VarChar
  um        String              @db.VarChar
  createdAt DateTime            @default(now()) @map("created_at")
  updatedAt DateTime            @updatedAt @map("updated_at")
  recipes   RecipesIngredient[]

  @@map("ingredients")
}

model RecipesIngredientsLink {
  id                 String  @id @default(uuid())
  recipeIngredientId String  @map("recipe_ingredient_id")
  type               String  @db.VarChar
  productId          String?
  recipeId           String?

  recipeIngredient RecipesIngredient @relation(fields: [recipeIngredientId], references: [id])
  Product          Product?          @relation(fields: [productId], references: [id])
  Recipe           Recipe?           @relation(fields: [recipeId], references: [id])

  @@map("recipes_ingredients_links")
}

model RecipeVariation {
  id           String   @id @default(uuid())
  recipeId     String   @map("recipe_id")
  name         String
  description  String
  factorType   String   @map("factor_type")
  factorNumber Float    @map("factor_number")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  Recipe       Recipe   @relation(fields: [recipeId], references: [id])

  @@map("recipes_variations")
}

model Category {
  id            String        @id @default(uuid())
  name          String
  sortOrder     Int           @map("sort_order")
  type          String
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  Products      Product[]
  SubCategories SubCategory[] @relation("CategorySubCategories")
  MenuItems     MenuItem[]

  @@map("categories")
}

model SubCategory {
  id         String     @id @default(uuid())
  name       String
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  Categories Category[] @relation("CategorySubCategories")
  Product    Product[]

  @@map("sub_categories")
}

model MenuItem {
  id          String          @id @default(uuid())
  name        String
  description String
  ingredients String
  categoryId  String          @map("category_id")
  Category    Category        @relation(fields: [categoryId], references: [id])
  prices      MenuItemPrice[]
  imageBase64 String
}

model MenuItemPrice {
  id         String    @id @default(uuid())
  MenuItem   MenuItem? @relation(fields: [menuItemId], references: [id])
  menuItemId String?
  label      String
  amount     Float
}
