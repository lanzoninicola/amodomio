// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  /// the url is override when the Prisma Client object is created
  /// this url is used only for the "migrate" commands
  url      = env("PRISMA_DB_DEV_URL")
  /// url      = env("PRISMA_DB_URL")
}

model Product {
  id                     String                   @id @default(uuid())
  name                   String
  um                     String?                  @default("UN")
  categoryId             String?                  @map("category_id")
  subCategoryId          String?                  @map("sub_category_id")
  createdAt              DateTime                 @map("created_at")
  updatedAt              DateTime                 @default(now()) @updatedAt @map("updated_at")
  Category               Category?                @relation(fields: [categoryId], references: [id])
  SubCategory            SubCategory?             @relation(fields: [subCategoryId], references: [id])
  RecipesIngredientsLink RecipesIngredientsLink[]

  @@map("products")
}

enum RecipeType {
  semiFinished @map("semi-finished")
  pizzaTopping @map("pizza-topping")
}

model Recipe {
  id                     String                   @id @default(uuid())
  name                   String
  type                   RecipeType               @default(semiFinished)
  description            String?
  hasVariations          Boolean                  @default(false) @map("has_variations")
  isVegetarian           Boolean                  @default(false) @map("is_vegetarian")
  isGlutenFree           Boolean                  @default(false) @map("is_gluten_free")
  createdAt              DateTime                 @map("created_at")
  updatedAt              DateTime                 @default(now()) @updatedAt @map("updated_at")
  ingredients            RecipesIngredient[]
  RecipeVariation        RecipeVariation[]
  RecipesIngredientsLink RecipesIngredientsLink[]

  @@map("recipes")
}

model RecipesIngredient {
  id           String   @id @default(uuid())
  recipeId     String   @map("recipe_id")
  ingredientId String   @map("ingredient_id")
  um           String   @db.VarChar
  quantity     String   @db.VarChar
  createdAt    DateTime @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  recipe     Recipe                   @relation(fields: [recipeId], references: [id])
  ingredient Ingredient               @relation(fields: [ingredientId], references: [id])
  links      RecipesIngredientsLink[]

  @@map("recipes_ingredients")
}

model Ingredient {
  id        String              @id @default(uuid())
  name      String              @db.VarChar
  um        String              @db.VarChar
  createdAt DateTime            @map("created_at")
  updatedAt DateTime            @default(now()) @updatedAt @map("updated_at")
  recipes   RecipesIngredient[]

  @@map("ingredients")
}

model RecipesIngredientsLink {
  id                 String  @id @default(uuid())
  recipeIngredientId String  @map("recipe_ingredient_id")
  type               String  @db.VarChar
  productId          String?
  recipeId           String?

  recipeIngredient RecipesIngredient @relation(fields: [recipeIngredientId], references: [id])
  Product          Product?          @relation(fields: [productId], references: [id])
  Recipe           Recipe?           @relation(fields: [recipeId], references: [id])

  @@map("recipes_ingredients_links")
}

model RecipeVariation {
  id           String   @id @default(uuid())
  recipeId     String   @map("recipe_id")
  name         String
  description  String
  factorType   String   @map("factor_type")
  factorNumber Float    @map("factor_number")
  createdAt    DateTime @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
  Recipe       Recipe   @relation(fields: [recipeId], references: [id])

  @@map("recipes_variations")
}

model Category {
  id            String        @id @default(uuid())
  name          String
  sortOrder     Int           @map("sort_order")
  type          String
  createdAt     DateTime      @map("created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at")
  Products      Product[]
  SubCategories SubCategory[] @relation("CategorySubCategories")
  MenuItems     MenuItem[]

  @@map("categories")
}

model SubCategory {
  id         String     @id @default(uuid())
  name       String
  createdAt  DateTime   @map("created_at")
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at")
  Categories Category[] @relation("CategorySubCategories")
  Product    Product[]

  @@map("sub_categories")
}

model GroceryList {
  id              String            @id @default(uuid())
  name            String
  createdAt       DateTime          @map("created_at")
  updatedAt       DateTime          @default(now()) @updatedAt @map("updated_at")
  GroceryListItem GroceryListItem[]

  @@map("grocery_list")
}

model GroceryListItem {
  id            String      @id @default(uuid())
  createdAt     DateTime    @map("created_at")
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at")
  groceryListId String      @map("grocery_list_id")
  GroceryList   GroceryList @relation(fields: [groceryListId], references: [id])
  name          String?
  quantity      Int
  purchased     Boolean     @default(false)

  @@map("grocery_list_items")
}

model MenuItemGroup {
  id             String    @id @default(uuid())
  name           String
  description    String
  /// sortOrder should be 1000 for the first group, 2000 for the second, etc
  sortOrderIndex Int       @map("sort_order_index")
  visible        Boolean   @default(true)
  createdAt      DateTime  @map("created_at")
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")
  deletedBy      String?   @map("deleted_by")

  MenuItem MenuItem[]

  @@map("menu_item_groups")
}

model MenuItem {
  id                                 String                               @id @default(uuid())
  name                               String
  description                        String
  ingredients                        String
  categoryId                         String                               @map("category_id")
  Category                           Category                             @relation(fields: [categoryId], references: [id])
  basePriceAmount                    Float                                @map("base_price_amount")
  visible                            Boolean
  active                             Boolean                              @default(true)
  upcoming                           Boolean                              @default(false)
  mogoId                             String                               @map("mogo_id")
  createdAt                          DateTime                             @map("created_at")
  updatedAt                          DateTime                             @default(now()) @updatedAt @map("updated_at")
  deletedAt                          DateTime?                            @map("deleted_at")
  deletedBy                          String?                              @map("deleted_by")
  tags                               MenuItemTag[]
  /// this track the position inside the menu
  sortOrderIndex                     Int                                  @default(0) @map("sort_order_index")
  notesPublic                        String?                              @map("note_public")
  slug                               String?                              @map("slug")
  MenuItemLike                       MenuItemLike[]
  MenuItemShare                      MenuItemShare[]
  imageId                            String?                              @map("image_id")
  MenuItemImage                      MenuItemImage?                       @relation(fields: [imageId], references: [id])
  MenuItemNote                       MenuItemNote[]
  MenuItemSellingPriceVariation      MenuItemSellingPriceVariation[]
  MenuItemCostVariation              MenuItemCostVariation[]
  priceVariations                    MenuItemPriceVariation[]
  MenuItemGroup                      MenuItemGroup?                       @relation(fields: [menuItemGroupId], references: [id])
  menuItemGroupId                    String?                              @map("menu_item_group_id")
  MenuItemSellingPriceVariationAudit MenuItemSellingPriceVariationAudit[]

  @@map("menu_items")
}

model MenuItemImage {
  id               String     @id @default(uuid())
  /// "secure_url": "https://res.cloudinary.com/dy8gw8ahl/image/upload/v1723138046/rvife3elpmmjojlnwypm.jpg",
  secureUrl        String?    @map("secure_url")
  /// "asset_folder": "cardapio"
  assetFolder      String?    @map("asset_folder")
  originalFileName String?    @map("original_file_name")
  /// "display_name": "margherita"
  displayName      String?    @map("display_name")
  height           Float?     @map("height")
  width            Float?     @map("width")
  /// "thumbnail_url": "https://res.cloudinary.com/dy8gw8ahl/image/upload/c_limit,h_60,w_90/v1723138046/rvife3elpmmjojlnwypm.jpg"
  thumbnailUrl     String?    @map("thumbnail_url")
  format           String?    @map("format")
  publicId         String?    @map("public_id")
  MenuItem         MenuItem[]

  @@map("menu_items_image")
}

/// to remove  DO NOT USE
model MenuItemVariation {
  id                     String                   @id @default(uuid())
  key                    String?                  @map("key")
  name                   String
  sortOrderIndex         Int                      @default(0) @map("sort_order_index")
  createdAt              DateTime                 @map("created_at")
  updatedAt              DateTime                 @default(now()) @updatedAt @map("updated_at")
  MenuItemPriceVariation MenuItemPriceVariation[]

  @@map("menu_item_variations")
}

/// to remove  DO NOT USE
model MenuItemPriceVariation {
  id                  String             @id @default(uuid())
  MenuItem            MenuItem?          @relation(fields: [menuItemId], references: [id])
  menuItemId          String?            @map("menu_item_id")
  MenuItemVariation   MenuItemVariation? @relation(fields: [menuItemVariationId], references: [id])
  menuItemVariationId String?            @map("menu_item_variation_id")
  label               String
  basePrice           Float              @default(0) @map("base_price")
  amount              Float
  discountPercentage  Float              @map("discount_percentage")
  showOnCardapio      Boolean            @default(false) @map("show_on_cardapio")
  showOnCardapioAt    DateTime?          @map("show_on_cardapio_at")
  createdAt           DateTime           @map("created_at")
  updatedAt           DateTime           @default(now()) @updatedAt @map("updated_at")
  updatedBy           String?            @map("updated_by")
  latestAmount        Float              @default(0) @map("latest_amount")
  MenuItemSize        MenuItemSize?      @relation(fields: [menuItemSizeId], references: [id])
  menuItemSizeId      String?            @map("menu_item_size_id")

  @@map("menu_item_price_variations")
}

model MenuItemSellingPriceVariation {
  id                       String                  @id @default(uuid())
  MenuItem                 MenuItem?               @relation(fields: [menuItemId], references: [id])
  menuItemId               String?                 @map("menu_item_id")
  MenuItemSize             MenuItemSize?           @relation(fields: [menuItemSizeId], references: [id])
  menuItemSizeId           String?                 @map("menu_item_size_id")
  MenuItemSellingChannel   MenuItemSellingChannel? @relation(fields: [menuItemSellingChannelId], references: [id])
  menuItemSellingChannelId String?                 @map("menu_item_selling_channel_id")
  /// efetivo valor de venda publico do cardapio
  priceAmount              Float                   @map("price_amount")
  /// a percentagem do profito realizado com o efetivo valor de venda
  profitActualPerc         Float                   @default(0) @map("profit_actual_perc")
  /// o valor calculado com base a formula do DNA
  priceExpectedAmount      Float                   @default(0) @map("price_expected_amount")
  /// a percentagem do profito desejada para o canal de venda
  profitExpectedPerc       Float                   @default(0) @map("profit_expected_perc")
  discountPercentage       Float                   @map("discount_percentage")
  showOnCardapio           Boolean                 @default(false) @map("show_on_cardapio")
  showOnCardapioAt         DateTime?               @map("show_on_cardapio_at")
  createdAt                DateTime                @map("created_at")
  updatedAt                DateTime                @default(now()) @updatedAt @map("updated_at")
  updatedBy                String?                 @map("updated_by")
  previousPriceAmount      Float                   @default(0) @map("previous_price_amount")

  @@map("menu_item_selling_prices")
}

model MenuItemSellingPriceVariationAudit {
  id                         String                 @id @default(uuid())
  MenuItem                   MenuItem               @relation(fields: [menuItemId], references: [id])
  menuItemId                 String                 @map("menu_item_id")
  MenuItemSize               MenuItemSize           @relation(fields: [menuItemSizeId], references: [id])
  menuItemSizeId             String                 @map("menu_item_size_id")
  MenuItemSellingChannel     MenuItemSellingChannel @relation(fields: [menuItemSellingChannelId], references: [id])
  menuItemSellingChannelId   String                 @map("menu_item_selling_channel_id")
  recipeCostAmount           Float                  @default(0) @map("recipe_cost_amount")
  packagingCostAmount        Float                  @default(0) @map("packaging_cost_amount")
  doughCostAmount            Float                  @default(0) @map("dough_cost_amount")
  wasteCostAmount            Float                  @default(0) @map("waste_cost_amount")
  dnaPerc                    Float                  @default(0) @map("dna_perc")
  sellingPriceExpectedAmount Float                  @default(0) @map("selling_price_expected_amount")
  profitExpectedPerc         Float                  @default(0) @map("profit_expected_perc")
  sellingPriceActualAmount   Float                  @default(0) @map("selling_price_actual_amount")
  profitActualPerc           Float                  @default(0) @map("profit_actual_perc")
  createdAt                  DateTime               @map("created_at")
  updatedAt                  DateTime               @default(now()) @updatedAt @map("updated_at")
  updatedBy                  String                 @map("updated_by")

  @@map("menu_item_selling_prices_audit")
}

model MenuItemSellingChannel {
  id                                 String                               @id @default(uuid())
  key                                String                               @map("key")
  name                               String
  feeAmount                          Float                                @default(0) @map("fee_amount")
  taxPerc                            Float                                @default(0) @map("tax_perc")
  onlinePaymentTaxPerc               Float                                @default(0) @map("online_payment_tax_perc")
  targetMarginPerc                   Float                                @default(0) @map("target_margin_perc")
  isMarketplace                      Boolean                              @default(false) @map("is_marketplace")
  sortOrderIndex                     Int                                  @default(0) @map("sort_order_index")
  MenuItemSellingPriceVariation      MenuItemSellingPriceVariation[]
  MenuItemSellingPriceVariationAudit MenuItemSellingPriceVariationAudit[]

  @@map("menu_item_selling_channels")
}

model MenuItemCostVariation {
  id                 String        @id @default(uuid())
  MenuItem           MenuItem      @relation(fields: [menuItemId], references: [id])
  menuItemId         String        @map("menu_item_id")
  costAmount         Float         @default(0) @map("cost_amount")
  createdAt          DateTime      @map("created_at")
  updatedAt          DateTime      @default(now()) @updatedAt @map("updated_at")
  updatedBy          String?       @map("updated_by")
  previousCostAmount Float         @default(0) @map("previous_cost_amount")
  MenuItemSize       MenuItemSize? @relation(fields: [menuItemSizeId], references: [id])
  menuItemSizeId     String?       @map("menu_item_size_id")

  @@unique([menuItemId, menuItemSizeId])
  @@map("menu_item_cost_variations")
}

model DnaEmpresaSettings {
  id                     String @id @default(uuid())
  faturamentoBrutoAmount Float  @default(0) @map("faturamento_bruto_amount")
  custoFixoAmount        Float  @default(0) @map("custo_fixo_amount")
  custoFixoPerc          Float  @default(0) @map("custo_fixo_perc")
  taxaCartaoPerc         Float  @default(0) @map("taxa_cartao_perc")
  impostoPerc            Float  @default(0) @map("imposto_perc")
  dnaPerc                Float  @default(0) @map("dna_perc")
  wastePerc              Float  @default(0) @map("waste_perc")

  @@map("dna_empresa_settings")
}

model MenuItemSize {
  id                                 String                               @id @default(uuid())
  key                                String?                              @map("key")
  name                               String
  sortOrderIndex                     Int                                  @default(0) @map("sort_order_index")
  createdAt                          DateTime                             @map("created_at")
  updatedAt                          DateTime                             @default(now()) @updatedAt @map("updated_at")
  pizzaDoughCostAmount               Float                                @default(0) @map("pizza_dough_cost_amount")
  packagingCostAmount                Float                                @default(0) @map("packaging_cost_amount")
  visible                            Boolean                              @default(true)
  MenuItemPriceVariation             MenuItemPriceVariation[]
  MenuItemSellingPriceVariation      MenuItemSellingPriceVariation[]
  MenuItemCostVariation              MenuItemCostVariation[]
  MenuItemSellingPriceVariationAudit MenuItemSellingPriceVariationAudit[]

  @@map("menu_item_sizes")
}

model MenuItemLike {
  id         String    @id @default(uuid())
  MenuItem   MenuItem? @relation(fields: [menuItemId], references: [id])
  menuItemId String?   @map("menu_item_id")
  sessionId  String?   @map("session_id")
  Session    Session?  @relation(fields: [sessionId], references: [id])
  amount     Float     @default(0) @map("amount")
  createdAt  DateTime  @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@map("menu_item_likes")
}

model MenuItemShare {
  id         String    @id @default(uuid())
  MenuItem   MenuItem? @relation(fields: [menuItemId], references: [id])
  menuItemId String?   @map("menu_item_id")
  sessionId  String?   @map("session_id")
  Session    Session?  @relation(fields: [sessionId], references: [id])
  createdAt  DateTime  @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("menu_item_shares")
}

/// here we can manage: featured (recommended), vegetarian, kids, meat
model MenuItemTag {
  id         String    @id @default(uuid())
  MenuItem   MenuItem? @relation(fields: [menuItemId], references: [id])
  menuItemId String?   @map("menu_item_id")
  Tag        Tag?      @relation(fields: [tagId], references: [id])
  tagId      String?   @map("tag_id")
  deletedAt  DateTime? @map("deleted_at")
  createdAt  DateTime  @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("menu_item_tags")
}

model Tag {
  id          String        @id @default(uuid())
  name        String
  public      Boolean       @default(false)
  colorHEX    String        @default("#e0e0e0") @map("color_hex")
  deletedAt   DateTime?     @map("deleted_at")
  createdAt   DateTime      @map("created_at")
  updatedAt   DateTime      @default(now()) @updatedAt @map("updated_at")
  MenuItemTag MenuItemTag[]

  @@map("tags")
}

model MenuItemNote {
  id         String    @id @default(uuid())
  MenuItem   MenuItem? @relation(fields: [menuItemId], references: [id])
  menuItemId String?   @map("menu_item_id")
  Note       Note?     @relation(fields: [noteId], references: [id])
  noteId     String?   @map("note_id")
  deletedAt  DateTime? @map("deleted_at")
  createdAt  DateTime  @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("menu_item_notes")
}

model ImportCustomerServicePizzaMediumCombinations {
  id                   String    @id @default(uuid())
  topping1             String    @map("topping_1")
  ingredient1          String    @map("ingredient_1")
  topping2             String    @map("topping_2")
  ingredient2          String    @map("ingredient_2")
  sellingPriceAmount   Float     @map("selling_price_amount")
  breakEvenPriceAmount Float     @map("break_even_price_amount")
  realMarginPerc       Float     @map("real_margin_perc")
  createdAt            DateTime  @map("created_at")
  updatedAt            DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt            DateTime? @map("deleted_at")

  @@map("import_customer_service_pizza_medium_combinations")
}

model ImportCustomerServicePizzaBiggerCombinations {
  id                   String    @id @default(uuid())
  topping1             String    @map("topping_1")
  ingredient1          String    @map("ingredient_1")
  topping2             String    @map("topping_2")
  ingredient2          String    @map("ingredient_2")
  topping3             String    @map("topping_3")
  ingredient3          String    @map("ingredient_3")
  topping4             String    @map("topping_4")
  ingredient4          String    @map("ingredient_4")
  sellingPriceAmount   Float     @map("selling_price_amount")
  breakEvenPriceAmount Float     @map("break_even_price_amount")
  realMarginPerc       Float     @map("real_margin_perc")
  createdAt            DateTime  @map("created_at")
  updatedAt            DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt            DateTime? @map("deleted_at")

  @@map("import_customer_service_pizza_bigger_combinations")
}

model Note {
  id           String         @id @default(uuid())
  name         String
  public       Boolean        @default(false)
  validFrom    DateTime?      @map("valid_from")
  validTo      DateTime?      @map("valid_to")
  createdAt    DateTime       @map("created_at")
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at")
  MenuItemNote MenuItemNote[]

  @@map("notes")
}

model Announcement {
  id        String    @id @default(uuid())
  name      String
  public    Boolean   @default(false)
  validFrom DateTime? @map("valid_from")
  validTo   DateTime? @map("valid_to")
  createdAt DateTime  @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("announcements")
}

model Setting {
  id        String   @id @default(uuid())
  context   String
  name      String
  type      String
  value     String
  createdAt DateTime @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("settings")
}

// model OrderDeliveryTimeLeftOrdersInbound {
//   id          String    @id @default(uuid())
//   orderNumber String    @map("order_number")
//   /// rawData: JSON format of order object
//   rawData     String?   @map("raw_data")
//   archivedAt  DateTime? @map("archived_at")
//   createdAt   DateTime  @map("created_at")
//   updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

//   @@map("odtl_orders_inbound")
// }

model MogoOrdersInbound {
  id           String    @id @default(uuid())
  orderNumber  String    @map("order_number")
  orderDateStr String?   @map("order_date_str")
  orderTimeStr String?   @map("order_time_str")
  /// rawData: JSON format of order object
  rawData      String?   @map("raw_data")
  archivedAt   DateTime? @map("archived_at")
  createdAt    DateTime  @map("created_at")
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("mogo_orders_inbound")
}

model Session {
  id            String          @id @default(uuid())
  userId        String?         @map("user_id")
  payload       String?
  createdAt     DateTime        @map("created_at")
  updatedAt     DateTime        @default(now()) @updatedAt @map("updated_at")
  MenuItemLike  MenuItemLike[]
  MenuItemShare MenuItemShare[]

  @@map("sessions")
}

model ImportProfile {
  id            String          @id @default(uuid())
  name          String
  description   String?
  table         String
  domainClass   String?         @map("domain_class")
  type          String          @default("csv")
  createdAt     DateTime        @map("created_at")
  updatedAt     DateTime        @default(now()) @updatedAt @map("updated_at")
  ImportSession ImportSession[]

  @@map("import_profiles")
}

model ImportSession {
  id                                 String                               @id @default(uuid())
  ImportProfile                      ImportProfile?                       @relation(fields: [importProfileId], references: [id])
  importProfileId                    String?                              @map("import_profile_id")
  description                        String?
  transformed                        Boolean                              @default(false)
  loaded                             Boolean                              @default(false)
  createdAt                          DateTime                             @map("created_at")
  updatedAt                          DateTime                             @default(now()) @updatedAt @map("updated_at")
  ImportSessionRecord                ImportSessionRecord[]
  ImportSessionRecordBankTransaction ImportSessionRecordBankTransaction[]

  @@map("import_sessions")
}

model ImportSessionRecord {
  id              String        @id @default(uuid())
  importSessionId String        @map("import_session_id")
  importSession   ImportSession @relation(fields: [importSessionId], references: [id])
  data            Json // Armazena os dados de cada linha do arquivo como JSON
  createdAt       DateTime      @map("created_at")
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map("import_sessions_records")
}

model ImportSessionRecordBankTransaction {
  id              String        @id @default(uuid())
  importSessionId String        @map("import_session_id")
  importSession   ImportSession @relation(fields: [importSessionId], references: [id])
  type            String
  date            DateTime
  amount          Float
  description     String
  bankName        String        @map("bank_name")
  createdAt       DateTime      @map("created_at")
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map("import_sessions_records_banks_transactions")
}

model BankTransaction {
  id                 String   @id @default(uuid())
  type               String
  date               DateTime
  amount             Float
  description        String
  bankName           String   @map("bank_name")
  hashRecord         String   @map("hash_record")
  /// esse é o ID que será chave para vincular a uma conta contabil
  hashTransactionRef String   @map("hash_transaction_ref")
  day                Int
  month              Int
  year               Int
  createdAt          DateTime @map("created_at")
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("banks_transactions")
}

model HashTransactionRefFinanceAccount {
  id                 String          @id @default(uuid())
  hashTransactionRef String          @map("hash_transaction_ref")
  financeAccountId   String?         @map("finance_account_id")
  financeAccount     FinanceAccount? @relation(fields: [financeAccountId], references: [id])

  createdAt DateTime @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("hash_transaction_refs_finance_accounts")
}

model FinanceAccount {
  id    String @id @default(uuid())
  name  String
  group String

  createdAt                        DateTime                           @map("created_at")
  updatedAt                        DateTime                           @default(now()) @updatedAt @map("updated_at")
  HashTransactionRefFinanceAccount HashTransactionRefFinanceAccount[]

  @@map("finance_accounts")
}
